<section id="content"></section>


<script type="text/jsx">

  var DiscussionIndex = React.createClass({
    loadDiscussionsFromServer: function () {
      $.ajax({
        url: this.props.url,
        dataType: 'json',
        cache: false,
        success: function (data) {
          this.setState({data: data});
        }.bind(this),
        error: function (xhr, status, err) {
          console.error(this.props.url, status, err.toString());
        }.bind(this)
      });
    },
    handleDiscussionSubmit: function (discussion) {
      $.ajax({
        url: "http://localhost:3000/api/discussions",
        dataType: 'json',
        type: 'POST',
        data: discussion,
        success: function (data) {
          //this.setState({data: data});
          this.loadDiscussionsFromServer();
        }.bind(this),
        error: function (xhr, status, err) {
          console.error(this.props.url, status, err.toString());
        }.bind(this)
      });
      this.loadDiscussionsFromServer();
    },

    getInitialState: function () {
      return {data: []};
    },
    componentDidMount: function () {
      this.loadDiscussionsFromServer();
      setInterval(this.loadDiscussionsFromServer, this.props.pollInterval);
    },
    render: function() {
      return (
        <div className="discussion-index">
          <h1>Discussions</h1>
          <br />
          <DiscussionList data={this.state.data} />
          <p>Create new discussion:</p>
          <DiscussionForm submitDiscussion = {this.handleDiscussionSubmit} />
        </div>
      );
    }
  });

  var DiscussionList = React.createClass({
    render: function () {
      var discussionNodes = [];
      var discussions = this.props.data.discussions;
      console.log(discussions);
      discussionNodes = discussions && discussions.map(function (discussion) {
        return (
          <Discussion author_name={discussion.author_name}
                      title={discussion.title}
                      summary={discussion.summary}
                      id={discussion.id} />
        );
      });
      return (
        <div className="commentList">
          {discussionNodes}
        </div>
      );
    }
  });

  var Discussion = React.createClass({
    render: function () {
      var url = "http://localhost:3000/discussions/" + this.props.id;
      return (
        <div className="discussion">
          <a href={url}>
          <p className="discussionTitle">Title: {this.props.title}</p>
          <p className="discussionAuthor">
            Author: {this.props.author_name}
          </p>
          <p className="discussionSummary">Summary: {this.props.summary}</p>
          </a>
          <br />
        </div>
      );
    }
  });

  var DiscussionForm = React.createClass({
    handleSubmit: function (event) {
      event.preventDefault();
      var title = React.findDOMNode(this.refs.title).value.trim();
      var description = React.findDOMNode(this.refs.description).value.trim();
      if (!title) {
        return;
      }
      // send information to server in function callback
      this.props.submitDiscussion({discussion: {title: title, content: description, project_id: <%= @project.id %>}});
      // reset form
      React.findDOMNode(this.refs.title).value="";
      React.findDOMNode(this.refs.description).value="";
      return;
    },
    render: function () {
      return (
        <form className="discussionForm" onSubmit={this.handleSubmit}>
          <input className="discussionTitle" type="text" placeholder="Project Title" ref="title" />
          <textarea className="discussionContent" name="name" rows="8" cols="40" ref="description" placeholder="Project description"></textarea>
          <br />
          <input className="edit-button" type="submit" value="Post" />
        </form>
      );
    }
  });

  React.render(
    <DiscussionIndex pollInterval={2000} url="http://localhost:3000/api/projects/<%= @project_id %>/discussions"/>,
    document.getElementById('content')
  );
</script>
